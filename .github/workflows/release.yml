name: TimeDot Build and Release

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.1.1
      
    - name: Restore NuGet packages
      run: nuget restore TimeDot.sln
      
    - name: Extract version from AssemblyInfo
      id: extract_version
      shell: powershell
      run: |
        $versionInfo = Get-Content -Path "TimeDot\Properties\AssemblyInfo.cs" | Select-String -Pattern 'AssemblyVersion\("([0-9]+\.[0-9]+\.[0-9]+)'
        if ($versionInfo -match 'AssemblyVersion\("([0-9]+\.[0-9]+\.[0-9]+)') {
          $version = $matches[1]
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Extracted version: $version"
        } else {
          echo "Failed to extract version, using default"
          echo "version=1.0.0" >> $env:GITHUB_OUTPUT
        }
    
    - name: Build solution
      run: msbuild TimeDot.sln /p:Configuration=Release /p:Platform="Any CPU"
      
    - name: Create release package
      shell: powershell
      run: |
        New-Item -ItemType Directory -Force -Path .\Release
        Copy-Item -Path "TimeDot\bin\Release\*" -Destination ".\Release\" -Recurse
        Compress-Archive -Path ".\Release\*" -DestinationPath ".\TimeDot-${{ steps.extract_version.outputs.version }}.zip"
    
    - name: Create Release and Upload Asset
      if: github.event_name != 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const { owner, repo } = context.repo;
          const version = '${{ steps.extract_version.outputs.version }}';
          
          // Create a release
          console.log(`Creating release v${version}...`);
          const release = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: `v${version}`,
            name: `TimeDot v${version}`,
            draft: false,
            prerelease: false
          });
          
          // Upload the asset
          console.log(`Uploading release asset...`);
          const assetPath = `./TimeDot-${version}.zip`;
          const assetName = `TimeDot-${version}.zip`;
          
          // Read the file
          const contentBytes = fs.readFileSync(assetPath);
          const contentType = 'application/zip';
          
          // Upload to the release
          await github.rest.repos.uploadReleaseAsset({
            owner,
            repo,
            release_id: release.data.id,
            name: assetName,
            data: contentBytes,
            headers: {
              'content-type': contentType,
              'content-length': contentBytes.length
            }
          });